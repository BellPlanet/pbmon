// Code generated by go-bindata.
// sources:
// tpl/index.html
// DO NOT EDIT!

// +build build_bindata

package tpl

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x56\x6d\x6b\xe3\x46\x10\xfe\xee\x5f\x31\x27\xc2\xad\x0c\xea\xea\x8e\xc0\x11\x12\xc9\xbd\x72\x69\xa1\xd0\xd0\xa3\xc9\x51\x8a\xc9\x87\x95\x34\xb2\x15\xaf\x76\xd5\xdd\x91\x5d\x53\xf2\xdf\xcb\xea\xc5\x7a\xb1\x53\x2e\x5f\x22\xcd\x3e\xf3\xcc\xce\xcc\x33\x63\x45\xef\xee\x7f\xff\xf2\xf4\xd7\xd7\x9f\x61\x4b\xa5\x5c\x2d\x22\xf7\x0f\xa4\x50\x9b\xd8\x43\xe5\x39\x03\x8a\x6c\xb5\x00\x88\x4a\x24\x01\xe9\x56\x18\x8b\x14\x7b\xdf\x9e\x7e\xf9\xe1\xc6\x6b\x0e\xa8\x20\x89\xab\x2a\x29\xb5\x8a\xc2\xf6\x65\x11\x85\xad\x5f\x94\xe8\xec\xe8\x50\xb5\x45\xa0\x2d\xc2\x17\xad\xac\x96\x18\xc0\x6f\xf5\x0e\xdf\x39\xf7\xac\xd8\x3b\x80\x23\xc2\x7f\x48\x18\x14\x50\x64\xb1\x57\x19\x4d\xda\x03\x25\x4a\x3c\xbd\xa4\x5a\xda\xd8\xbb\xfe\xe0\x81\xd1\x07\x1b\x7b\x1f\x3f\x78\x50\x49\x91\xe2\x56\xcb\x0c\x4d\x87\x83\x4a\x58\x42\xd8\xa2\x41\x6f\x15\x85\x3d\x6b\x73\xd7\xb0\x8b\x36\x8a\x5a\xa8\xaa\x26\xa0\x63\x85\xb1\xe7\xb0\x7d\xcc\x12\xad\x15\x1b\x7c\x3a\x56\x38\x8b\xd2\x9d\x34\x3e\xde\xf7\xd0\x26\x35\x91\x56\x3d\xb1\xad\x93\xb2\x20\x0f\xf6\x42\xd6\xc3\xeb\x94\xc7\xa6\xa6\xa8\x08\xac\x49\x63\x6f\x4b\x54\xd9\xdb\x30\xac\x55\xb5\xdb\xf0\x54\x97\xe1\xcb\xdf\x35\x9a\xe3\xe7\x6b\x7e\xcd\x3f\x86\x59\x61\xa9\xb3\xf0\x17\xeb\x32\x6e\x9d\xbf\x83\xa7\x29\x57\x52\xe7\x2f\xf6\xf3\x27\x7e\xc3\x3f\xb5\x5c\xbd\xf5\x2d\xb6\x36\x41\x3f\xaf\x55\x4a\x85\x56\xfe\x12\xfe\x6d\x2c\x00\xa9\x56\x96\x40\xea\xcd\x23\x19\x14\x25\xc4\xe0\x4b\xdc\xa3\x0c\x40\x2f\x21\x5e\x9d\x70\x3d\x52\xe9\x03\xc4\xa0\xf0\x00\xf7\x82\x70\x72\xa8\x25\x72\xa9\x37\xbe\x0e\x60\xcd\xd6\x2c\x80\x8e\x88\x01\x0b\x9c\x1f\x27\xfd\x48\xa6\x50\x1b\x7f\x19\x00\x7b\x06\xf6\xcc\x5f\x74\xa1\x7c\xc6\x96\xcb\xbb\x8e\xe9\xf5\x6e\x31\xb9\xd8\x0e\x8f\x5f\x1b\x81\xc4\xc0\x1a\xb9\xde\x36\xa9\xb2\xbb\x39\xea\x61\x68\xfd\x80\x1d\xe9\x81\xcd\x88\x1b\x9a\x2b\x88\xe1\xca\x67\xeb\xa6\xc9\x8d\xe5\x99\x2d\xa7\xd4\x23\x8a\x09\x7a\x64\x3f\xf3\x69\xe5\x31\x81\xb7\xa6\x06\x39\x85\x92\x30\xe4\x8a\xde\x44\x0f\xc6\xe1\x2e\x96\xdf\x68\xed\xe0\xa7\x7e\x57\x6e\xb6\x5b\xe7\x25\x77\x87\x77\x33\x87\xae\x2e\x10\x37\xae\x5c\x6a\xbd\xab\x2b\x47\xef\x8f\x43\x0d\x5e\x45\x0e\xfe\xbb\xce\x69\x39\x0a\x0f\x83\x46\x7c\x86\xc6\x68\xc3\x02\x58\x8f\x38\x5c\x9f\x95\x26\xc8\x75\xad\xb2\x4b\xad\x75\x7f\x06\xa9\x36\x6a\xb0\xbc\x2e\x16\x17\xe8\x0b\x95\x6b\x16\xf4\x57\x1f\x4a\x36\xe9\x5d\xaa\x25\xc4\x20\x75\x2a\x9c\xa2\xf9\x60\x8b\x63\x60\xed\xdc\x30\xf8\x11\xd8\xc1\xba\x87\x5b\xf7\x70\xcb\xe6\xd5\x39\xd8\xad\xb6\xae\xa0\xeb\xde\x3f\x00\x16\x86\x4e\xbb\x3d\xb1\x03\x38\xa3\x6d\x2e\x37\x4a\xec\x9c\xab\x1b\x8c\x3f\x31\x79\xd4\xe9\x0e\xc9\x6f\xe9\x47\xc8\x83\xe5\x49\xa1\x84\x39\xf6\x3a\x15\xc6\x88\x63\x52\xe7\x39\x1a\x36\xca\xf3\x60\xb9\x56\xba\x42\xe5\xa4\x31\x13\xc2\xa5\x52\xb1\x54\x2b\x85\x29\x61\x36\xbe\xd7\xeb\x9c\xb1\x3c\x89\xc1\x37\xe2\x70\xc6\xdb\xe6\x91\xd4\x79\x97\xc8\xb7\x42\xd1\xcd\x4f\xee\x86\x0e\xce\x33\x41\x62\xd2\xcd\xc9\x84\x40\xdc\x37\x8c\x67\x98\xea\xac\x53\xa5\x13\xe9\x1f\x28\x32\x34\x3c\x35\x28\x08\xfd\xa4\xce\xa7\xa2\x38\x4f\xa7\x3c\x75\x7e\x94\xca\x3c\xa7\x6e\xca\x78\x2a\x8b\x74\xe7\xfb\xf3\x79\x41\x5e\x19\xdc\xa3\xa2\x7b\xcc\x45\x2d\xc9\x7f\x43\x47\xfd\x34\x5d\xf1\xbd\x90\xfe\x59\x57\xcb\xc9\x5e\x19\x6f\x83\x1e\x3f\x52\x70\x2a\xe4\x23\x69\xe3\x6a\x60\x91\x7e\x25\x2c\xfd\x7e\x81\x05\x6d\x94\x11\xff\x5b\xf0\x87\xf1\x4c\x4d\x87\x74\xe2\xdb\xaa\xd3\xa0\xeb\x16\x3b\x29\xfb\x75\xbe\x61\xfa\x24\x27\xe1\x36\xb3\xdb\xbd\xbd\xf4\xfe\xc7\xf3\xe1\xc2\x02\x71\xeb\xa3\x8d\xf8\xfe\xfd\x74\x99\x0d\x9d\x19\x95\x7b\x5e\x93\xb3\xfa\x5e\x5e\x52\xcd\xd6\xbc\xb4\x32\x4f\x55\x58\xb4\xb5\x68\xfb\x39\xfc\x20\x46\x61\xfb\x71\x13\x85\xed\xb7\xd3\x7f\x01\x00\x00\xff\xff\x9d\x70\x20\x86\x4c\x09\x00\x00")

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 2380, mode: os.FileMode(420), modTime: time.Unix(1528346800, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html": indexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"index.html": &bintree{indexHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

